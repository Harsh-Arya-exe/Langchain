# -*- coding: utf-8 -*-
"""Video_bot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zy8wvXkLRWQTfa2y3vqDFUU9fIRSWtkY

# Install Libraries
"""

!pip install -q youtube-transcript-api langchain-community langchain-openai \
               faiss-cpu tiktoken python-dotenv langchain-huggingface

!pip install -U langchain-core

!pip install langchain

from youtube_transcript_api import YouTubeTranscriptApi, TranscriptsDisabled
from langchain.text_splitter import RecursiveCharacterTextSplitter
from langchain_community.vectorstores import FAISS
from langchain_core.prompts import PromptTemplate

from langchain_huggingface import HuggingFaceEmbeddings, ChatHuggingFace, HuggingFaceEndpoint
from IPython.display import display, Markdown
from dotenv import load_dotenv
import getpass
import os

"""# Step 1.a Indexing(Document Ingestion)"""

video_id = "Gfr50f6ZBvo"
try:
    transcript_list = YouTubeTranscriptApi.get_transcript(video_id, languages=["en"])

    transcript = " ".join(chunk["text"] for chunk in transcript_list)
    print(transcript)

except:
    print("No captions available")

print(transcript_list)

"""# Step 1.b Indexing(Text Splitting)"""

splitter = RecursiveCharacterTextSplitter(chunk_size=1000, chunk_overlap=200)

chunks = splitter.create_documents([transcript])

len(chunks)

chunks[0]

"""# Step 1.c and 1.d - Indexing(Embedding Generation and Storing in Vector Store)"""

embeddings = HuggingFaceEmbeddings(model_name = "sentence-transformers/all-MiniLM-L6-v2")
vector_store = FAISS.from_documents(chunks, embeddings)

vector_store.index_to_docstore_id

vector_store.get_by_ids(['63653b62-9d57-465e-9762-5c4a6c2d66a6'])

"""# Step 2 - Retrieval"""

retriever = vector_store.as_retriever(
    search_type='similarity',
    searck_kwargs={'k':2}
)

retriever

retriever.invoke('What is Deepmind?')

"""# Step 3 - Augumentation"""

prompt = PromptTemplate(
    template = """
      You are a helpful assistant.
      Answer ONLY from the provided transcript context.
      If the context is insufficient, just say you don't know.

      {context}
      Question: {question}
    """,
    input_variables = ['context', 'question']
)

question = "is the topic of nuclear fusion discussed in this video? if yes then what was discussed"
retrieved_docs    = retriever.invoke(question)

retrieved_docs

context_text = "\n\n".join(doc.page_content for doc in retrieved_docs)
context_text

final_prompt = prompt.invoke({'context': context_text, 'question': question})

final_prompt

"""# Step4 - Generation"""

hf_key = getpass.getpass("HuggingFace API token: ")

load_dotenv()

llm = HuggingFaceEndpoint(
    repo_id="google/gemma-2b-it",
    huggingfacehub_api_token=hf_key
)

model = ChatHuggingFace(llm=llm)

query = "What is the capital of Delhi?"

response = model.invoke(query)

display(Markdown(response.content))

answer = model.invoke(final_prompt)

print(answer.content)

"""# Building a Chain"""

from langchain.schema.runnable import RunnableParallel, RunnablePassthrough, RunnableLambda
from langchain_core.output_parsers.string import StrOutputParser

def format_docs(retrieved_docs):
  context_text = "\n\n".join(doc.page_content for doc in retrieved_docs)
  return context_text

parallel_chain = RunnableParallel({
        'context': retriever | RunnableLambda(lambda x: format_docs(x)),
        'question': RunnablePassthrough()
})

parallel_chain.invoke("Who is Demis")

parser = StrOutputParser()

main_chain = parallel_chain | prompt | model | parser

display(Markdown(main_chain.invoke('Can you summarize the video')))