# -*- coding: utf-8 -*-
"""Tool-calling-in-Langchain.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RETFUcTkcjAzFWmymY2gmawV1sni1ecH
"""

!pip install -q langchain-openai langchain-core langchain-huggingface requests langchain-groq --quiet

!pip install python-dotenv

from langchain_huggingface import HuggingFaceEmbeddings, ChatHuggingFace, HuggingFaceEndpoint
from langchain_core.tools import tool
from langchain_groq import ChatGroq
from langchain_core.messages import HumanMessage
from dotenv import load_dotenv
import requests
import getpass
import os

os.environ['GROQ_API_KEY'] = getpass.getpass("Enter the api key: ")

llm = ChatGroq(
    model="llama-3.1-8b-instant"
)

@tool
def multiply(a : int, b: int) -> int:
  """Given 2 numbers a and b , this tool returns their product"""
  return a*b

print(multiply.invoke({'a':3, 'b':4}))

print(multiply.name)
print(multiply.description)
print(multiply.args)

llm.invoke('hi')

llm_with_tool = llm.bind_tools([multiply])

llm_with_tool.invoke('Hi how are you')

query = HumanMessage(content='can you multiply 3 with 1000')

messages = [query]

messages

result = llm_with_tool.invoke(messages)

result

messages.append(result)

result

result.tool_calls[0]

messages

tool_result = multiply.invoke(result.tool_calls[0])

tool_result

messages.append(tool_result)

messages

llm_with_tool.invoke(messages).content

"""## Currency Conversion Tool"""

from langchain_core.tools import InjectedToolArg
from typing import Annotated

@tool
def get_conversion_factor(base_currency : str, target_currency : str) -> float:
  """
  This function fetches the currency conversion factor between a given base currency and a target currency
  """
  url = f'https://v6.exchangerate-api.com/v6/YOUR_API_KEY/pair/{base_currency}/{target_currency}'

  response = requests.get(url)

  return response.json()

@tool
def convert(base_currency_value : int, conversion_rate : Annotated[float, InjectedToolArg]) -> float:
  """
  given a currency conversion rate this function calculates the target currency value from a given base currency value
  """
  return base_currency_value * conversion_rate

get_conversion_factor.invoke({'base_currency':'USD','target_currency':'INR'})

convert.invoke({'base_currency_value':10, 'conversion_rate':85.16})

llm_with_tools = llm.bind_tools([get_conversion_factor, convert])

messages = [HumanMessage('What is the conversion factor between INR and USD, and based on that can you convert 10 inr to usd')]

messages

ai_message = llm_with_tools.invoke(messages)

messages.append(ai_message)

ai_message.tool_calls

for tool_call in ai_message.tool_calls:
  print(tool_call)

import json


for tool_call in ai_message.tool_calls:
  if tool_call['name'] == 'get_conversion_factor':
    tool_message1 = get_conversion_factor.invoke(tool_call)
    conversion_rate = json.loads(tool_message1.content)['conversion_rate']
    messages.append(tool_message1)
  if tool_call['name'] == 'convert':
    tool_call['args']['conversion_rate'] = conversion_rate
    tool_message2 = convert.invoke(tool_call)
    messages.append(tool_message2)

messages

llm_with_tools.invoke(messages).content